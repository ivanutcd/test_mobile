name: Testing

on:
  pull_request:
    types: [edited, reopened, ready_for_review, synchronize, opened]

env:
  ORGANIZATION: proyectos-enee

jobs:
  testing-mobile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Verify pnpm installation
        run: |
          pnpm --version
          which pnpm

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          cd mobile
          echo "Installing dependencies with pnpm..."
          pnpm --version
          for i in 1 2 3; do
            pnpm install && break
            echo "pnpm install failed... retrying in 10s ($i/3)"
            sleep 10
          done

      - name: Validate project setup
        run: |
          cd mobile
          node scripts/validate-setup.js

      - name: Type check (optional)
        run: |
          cd mobile
          if pnpm type-check; then
            echo "Type check passed"
          else
            echo "Type check failed - continuing..."
          fi
        continue-on-error: true

      - name: Lint code (optional)
        run: |
          cd mobile
          if pnpm lint; then
            echo "Linting passed"
          else
            echo "Linting failed - continuing..."
          fi
        continue-on-error: true

      - name: Run tests (optional)
        run: |
          cd mobile
          if pnpm test; then
            echo "Tests passed"
          else
            echo "Tests failed or no tests found - continuing..."
          fi
        continue-on-error: true

      - name: Build check
        run: |
          cd mobile
          pnpm exec expo export --platform web

      - name: Validate Expo config
        run: |
          cd mobile
          pnpm exec expo config --type public

      - name: Install EAS CLI
        run: |
          npm install -g @expo/eas-cli

      - name: EAS Build validation (optional)
        run: |
          cd mobile
          echo "Validating EAS build configuration..."
          
          # Verificar configuración de EAS
          if [ -f "eas.json" ]; then
            echo "eas.json found, validating configuration..."
            eas build:configure --non-interactive || echo "EAS configure failed, continuing..."
          else
            echo "eas.json not found, creating basic configuration..."
            eas build:configure --non-interactive || echo "EAS configure failed, continuing..."
          fi
          
          # Validar que el proyecto esté configurado correctamente
          echo "Validating project configuration..."
          eas project:info || echo "Project info check failed, continuing..."
          
          # Verificar configuración para builds locales
          echo "Checking local build configuration..."
          if [ -f "eas.json" ]; then
            echo "eas.json configuration:"
            cat eas.json
          fi
          
          # Verificar que se puede hacer un pre-build check (solo validación, sin enviar)
          echo "Running pre-build validation..."
          eas build --platform all --profile preview --non-interactive --no-wait --dry-run || echo "Pre-build validation completed (may have warnings)"
        continue-on-error: true

  cleaning:
    runs-on: ubuntu-latest
    needs: [testing-mobile]
    if: always()
    steps:
      - name: Limpiar imagenes no utilizadas
        run: |
          docker image prune -f -a

      - name: Limpiar builder cache de docker
        run: |
          docker builder prune -f -a
