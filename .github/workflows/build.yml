name: Build image

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

env:
  ORGANIZATION: proyectos-enee
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: 'proyectos-enee/utcd/cobroprejuridico/backend'
  IMAGE_NAME_FRONTEND: 'proyectos-enee/utcd/cobroprejuridico/frontend'
  DB__CONEXION: 'Server=localhost;Database=enee;User Id=postgres; Password=P@ssword1234;Enlist=true;'

jobs:
  backend:
    runs-on: utcd-dev-infra1
    permissions:
      contents: read
      packages: write
    steps:
      - name: Pulling repo
        uses: actions/checkout@v3

      - name: Update Dockerfile version
        run: |
          sed -i 's/<DOCKER_BACKEND_IMAGE_VERSION>/'${{ vars.DOCKER_BACKEND_IMAGE_VERSION }}'/g' ./backend/Dockerfile
          cat ./backend/Dockerfile

      - name: Log in to the container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ vars.ACCESS_TOKEN }}

      - name: Extracting metada (tags, labels) for docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=sha
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/') }}
            type=ref,event=tag,enable=${{ startsWith(github.ref, 'refs/tags/') }}

      - name: Build and push image
        uses: docker/build-push-action@v3
        with:
          context: ./backend
          file: ./backend/Dockerfile
          build-args: |
            NUGET_USERNAME=${{ github.actor }}
            NUGET_PASSWORD=${{ vars.ACCESS_TOKEN }}
            GIT_ORGANIZATION=${{ env.ORGANIZATION }}
            DB__CONEXION=${{ env.DB__CONEXION }}
            DB__SCHEMA_EVENTS=utcd.cobro_prejuridico_events
            DB__SCHEMA_DOCS=utcd.cobro_prejuridico_docs
            DB__SCHEMA_TABLES=utcd.cobro_prejuridico
            AUTH__SERVER=http://localhost:8080
            AUTH__CORS_ORIGINS=http://localhost:5173
            AUTH__CLIENT_ID=api
            AUTH__CLIENT_SECRET=api
            AUTH__AUDIENCE=api
            QUEUE__DISABLED=true
            QUEUE__SERVER=amqp://localhost:5672
            QUEUE__USER=rabbitmq
            QUEUE__PASSWORD=Cambiar*001
            MONITORING__OTL_METRICS_ENDPOINT=http://localhost:4317
            MONITORING__OTL_TRACES_ENDPOINT=http://localhost:4318
            SERVER__PARAMETROS=https://dev-api-parametros.eneeutcd.hn
          no-cache: true
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  frontend:
    runs-on: utcd-dev-infra1
    needs: backend
    permissions:
      contents: read
      packages: write
    steps:
      - name: Pulling repo
        uses: actions/checkout@v3

      - name: Update Dockerfile version
        run: |
          sed -i 's/<DOCKER_FRONTEND_IMAGE_VERSION>/'${{ vars.DOCKER_FRONTEND_IMAGE_VERSION }}'/g' ./frontend/Dockerfile
          cat ./frontend/Dockerfile

      - name: Log in to the container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ vars.ACCESS_TOKEN }}

      - name: Extracting metada (tags, labels) for docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=sha
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/') }}
            type=ref,event=tag,enable=${{ startsWith(github.ref, 'refs/tags/') }}

      - name: Build and push image
        uses: docker/build-push-action@v3
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          no-cache: true
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  mobile:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: mobile

      - name: Setup Node.js
        working-directory: mobile
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Java
        working-directory: mobile
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Install pnpm
        working-directory: mobile
        run: npm install -g pnpm

      - name: Install dependencies
        working-directory: mobile
        run: pnpm install

      - name: Install expo-dev-client
        working-directory: mobile
        run: npx expo install expo-dev-client

      - name: Install jq
        working-directory: mobile
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install EAS CLI
        working-directory: mobile
        run: npm install -g eas-cli

      - name: Build APK locally with EAS
        working-directory: mobile
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          eas build --platform android --profile development --local --non-interactive --output=./app-release.apk

      - name: Rename APK with version tag
        working-directory: mobile
        id: rename_apk
        run: |
          VERSION=${{ github.ref_name }}
          NEW_NAME=UTCDForms-${VERSION}.apk
          mv app-release.apk $NEW_NAME
          echo "APK_FINAL_PATH=${NEW_NAME}" >> $GITHUB_OUTPUT

      - name: Check that APK file exists
        working-directory: mobile
        run: ls -lh ${{ steps.rename_apk.outputs.APK_FINAL_PATH }}

        # Upload APK to GitHub Release
      - name: Upload APK to existing GitHub Release using gh CLI
        working-directory: mobile
        if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${GITHUB_REF##*/}
          APK_FILE="UTCDForms-${VERSION}.apk"

          if [ -f "$APK_FILE" ]; then
            echo "Uploading $APK_FILE to release $VERSION..."
            gh release upload "$VERSION" "$APK_FILE" --clobber
          else
            echo "APK not found: $APK_FILE"
            exit 1
          fi
